#!/bin/bash

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Test runner for the build system. This script should preferably be run
# "directly" and not inside docker, permitting the test cases to execute
# both inside and outside a docker container.

set -o pipefail
set -o errexit

trap _cleanup EXIT
function _cleanup() {
  declare -r -i STATUS=$?
  if [[ -d ${TMP_HASHES_DIR} ]]; then
    rm -rf "${TMP_HASHES_DIR}"
  fi
  if [[ ${STATUS} -ne 0 ]]; then
    printf "Error: get-builder-image-tagged status code: %d\n" "${STATUS}" &>/dev/stderr
  fi
  exit ${STATUS}
}

declare -r -a IMAGE_LIST=(
  "build-debian"
  "build-amazonlinux2"
  "presubmit"
  "release"
  "utils"
)

function usage() {
  declare -r -i exitval=${1-1}
  cat &>/dev/stderr <<USAGE
usage:
  $0
USAGE
  # shellcheck disable=SC2086
  exit ${exitval}
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    -h | --help) usage 0 ;;
    *)
      printf "unrecognized arg: %s\n" "$1"
      usage
      ;;
  esac
done

TESTS_DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
readonly TESTS_DIR
readonly TOOLS_DIR="${TESTS_DIR}"/../tools
readonly HASHES_DIR="${TESTS_DIR}"/data/hashes
# shellcheck disable=SC1090
source "${TOOLS_DIR}"/builder.sh

# warning when running inside a docker container
if [[ -f /.dockerenv ]]; then
  printf "warning: Executing within docker container, which obviates testing in a non-docker environment\n" &>/dev/stderr
fi
printf "Generating image hashes (direct mode)\n"
for img in "${IMAGE_LIST[@]}"; do
  "${TOOLS_DIR}"/get-builder-image-tagged --no-build --image "${img}" > "${HASHES_DIR}/${img}"
done

BASELINE_UPDATES="$(git diff --name-only "${HASHES_DIR}")"
if [[ -n $BASELINE_UPDATES ]]; then
  # shellcheck disable=SC2086
  printf "detected shift in baseline files: %s\n" ${BASELINE_UPDATES}
fi

TMP_HASHES_DIR=$(mktemp -d)

printf "Generating image hashes (cbuild mode)\n"
for img in "${IMAGE_LIST[@]}"; do
  "${TOOLS_DIR}"/cbuild --image build-debian --cmd "tools/get-builder-image-tagged --image ${img} --no-build" > "${TMP_HASHES_DIR}/${img}"
done

if ! diff --recursive "${HASHES_DIR}" "${TMP_HASHES_DIR}"; then
  printf "error: mismatch between direct and cbuild mode\n" &>/dev/stderr
  exit 1
fi
